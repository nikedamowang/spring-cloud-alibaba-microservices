### 分布式用户会话管理API测试

### 1. 用户登录 - 分布式会话管理
POST http://localhost:8080/user/login
Content-Type: application/json
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36

{
  "username": "alice",
  "password": "555"
}

### 2. 模拟不同设备登录
POST http://localhost:8080/user/login
Content-Type: application/json
User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15

{
  "username": "alice",
  "password": "555"
}

### 3. 刷新Token
POST http://localhost:8080/session/refresh
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}",
  "deviceInfo": "Desktop"
}

### 4. 获取用户所有会话
GET http://localhost:8080/session/user/1

### 5. 检查用户是否在线
GET http://localhost:8080/session/online/1

### 6. 获取所有在线用户
GET http://localhost:8080/session/online/users

### 7. 踢出用户所有会话
POST http://localhost:8080/session/kickout/user/1

### 8. 踢出指定设备
POST http://localhost:8080/session/kickout/device?userId=1&deviceInfo=Mobile

### 9. 用户注销
POST http://localhost:8080/user/logout?sessionId={{sessionId}}

### 10. 验证会话
POST http://localhost:8080/session/validate?sessionId={{sessionId}}

### 11. Token验证（通过用户服务）
POST http://localhost:8080/user/validate?sessionId={{sessionId}}

### 测试场景说明：

#### 场景1：多设备登录管理
1. 用第一个请求（Desktop浏览器）登录
2. 用第二个请求（iPhone）登录
3. 观察是否正确创建了不同的会话
4. 查看用户会话列表，应该有2个活跃会话

#### 场景2：单点登录控制
1. 连续用不同User-Agent登录4次（超过最大设备数3）
2. 观察最旧的会话是否被踢出
3. 验证会话列表中只保留最新的3个会话

#### 场景3：Token刷新机制
1. 登录获取accessToken和refreshToken
2. 等待accessToken过期（30分钟）或手动设置短过期时间
3. 使用refreshToken刷新获取新的accessToken
4. 验证新Token可以正常使用

#### 场景4：在线状态监控
1. 多个用户同时登录
2. 查看在线用户列表
3. 踢出部分用户
4. 再次查看在线用户列表变化

#### 场景5：会话管理
1. 获取用户所有会话
2. 踢出指定设备会话
3. 踢出用户所有会话
4. 验证会话状态变化
